require("dotenv").config({ path: "./assets/.env" });
const TelegramBotApi = require("node-telegram-bot-api");
const bot = new TelegramBotApi(process.env.TOKEN, { polling: true });
const fs = require("fs");

const users = require("./assets/data/users.json");
const { saveReceipt, writeToLogFile } = require("./assets/modules/utils");
const commands = JSON.parse(fs.readFileSync("./assets/data/commands.json"));

bot.setMyCommands(commands);

bot.on("message", (msg) => {
  const command = msg.text;
  const chatId = msg.chat.id;
  var user = users.filter((x) => x.id === msg.from.id)[0];

  if (!user) {
    users.push({
      id: msg.from.id,
      nick: msg.from.username,
      name: msg.from.first_name,
      isHavePremium: false,
      dateBuyedPremium: null,
    });

    user = users.filter((x) => x.id === msg.from.id)[0];
    fs.writeFileSync(
      "./assets/data/users.json",
      JSON.stringify(users, null, "\t")
    );
  }

  if (msg.chat.type === "private") {
    switch (command) {
      case "/start":
        const startMessage = `
        –ß–¢–û–ë–´ –ò–ó–ë–ï–ñ–ê–¢–¨ –ú–û–®–ï–ù–ù–ò–ß–ï–°–¢–í–ê –ò –ù–ï–ó–ê–ö–û–ù–ù–´–ï –¢–ï–ú–´, –ú–´ –ó–ê–ü–£–°–¢–ò–õ–ò –ü–õ–ê–¢–ù–£–Æ –†–ï–ö–õ–ê–ú–£\n\n–ë–û–¢ –û–ü–õ–ê–¢–´, –ü–†–ï–î–û–°–¢–ê–í–õ–Ø–Æ–©–ò–ô –î–û–°–¢–£–ü –ö –†–ê–ó–ú–ï–©–ï–ù–ò–Æ –†–ï–ö–õ–ê–ú–´ –í –ù–ê–®–ï–ú –ß–ê–¢–ï @ELI_TA_BOT\n\n–°–¢–û–ò–ú–û–°–¢–¨ –†–ï–ö–õ–ê–ú–´: 30 –î–ù–ï–ô - 500 ‚ÇΩ\n\n–ü–û–°–õ–ï –û–ü–õ–ê–¢–´ –†–ï–ö–õ–ê–ú–´, –í–´ –ú–û–ñ–ï–¢–ï –í –°–í–û–ë–û–î–ù–û–ú –î–û–°–¢–£–ü–ï –ü–£–ë–õ–ò–ö–û–í–ê–¢–¨ –°–í–û–ò –ü–û–°–¢–´ –í –¢–ï–ß–ï–ù–ò–ò 30 –°–£–¢–û–ö.`;

        bot.sendMessage(chatId, startMessage, {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: `paymentSuccess` }],
              [
                {
                  text: "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ –æ–ø–ª–∞—Ç–µ",
                  callback_data: `instruction`,
                },
              ],
              [{ text: "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data: `feedback` }],
            ],
          }),
        });
        break;

      default:
        break;
    }
  } else if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
    let messageDeleted = false;
    if (!user.isHavePremium) {
      bot.deleteMessage(chatId, msg.message_id);
      messageDeleted = true;
      bot
        .sendMessage(
          chatId,
          `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, @${user.nick} !\n–î–ª—è –ø–æ–¥–∞—á–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${process.env.REQUISITES_BOT}`
        )
        .then((sentMessage) => {
          const messageId = sentMessage.message_id;

          setTimeout(() => {
            bot.deleteMessage(chatId, messageId);
          }, 30000);
        });
    }
    const generateLogText = `user-chat-id: ${user?.id}, is-have-premium: ${user?.isHavePremium}, message-deleted: ${messageDeleted}, user-name: ${user?.name}, user-nick: ${user?.nick}`;
    writeToLogFile(generateLogText);
  }
});

const handleDocumentSend = (msg) => {
  saveReceipt(msg, bot);
  bot.removeListener("document", handleDocumentSend);
  bot.removeListener("photo", handlePhotoSend);
};

const handlePhotoSend = (msg) => {
  saveReceipt(msg, bot);
  bot.removeListener("document", handleDocumentSend);
  bot.removeListener("photo", handlePhotoSend);
};

function checkPaymentStatus(query) {
  if (query.includes("cancelPaymentId:")) {
    const paymentId = query.split(":")[1];

    const userWithPaymentId = users.find((x) => x.id === Number(paymentId));

    if (userWithPaymentId) {
      userWithPaymentId.isHavePremium = false;
      userWithPaymentId.dateBuyedPremium = null;

      fs.writeFileSync(
        "./assets/data/users.json",
        JSON.stringify(users, null, "\t")
      );

      bot.sendMessage(
        userWithPaymentId.id,
        `–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ${process.env.REQUISITES_TELEGRAM}`
      );

      bot.sendMessage(
        process.env.ADMIN_ID,
        `–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è ${userWithPaymentId.name}!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç`
      );
    }
  } else if (query.includes("confirmPaymentId:")) {
    const paymentId = query.split(":")[1];

    const userWithPaymentId = users.find((x) => x.id === Number(paymentId));

    if (userWithPaymentId) {
      const currentDate = new Date();
      const endDate = new Date(
        currentDate.getTime() + 30 * 24 * 60 * 60 * 1000
      );

      userWithPaymentId.isHavePremium = true;
      userWithPaymentId.dateBuyedPremium = endDate;

      fs.writeFileSync(
        "./assets/data/users.json",
        JSON.stringify(users, null, "\t")
      );

      bot.sendMessage(
        userWithPaymentId.id,
        `–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –æ–ø–ª–∞—á–µ–Ω–∞! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π.\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è ${endDate}`
      );

      bot.sendMessage(
        process.env.ADMIN_ID,
        `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –æ–ø–ª–∞—Ç—É –¥–ª—è ${userWithPaymentId.name}!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${endDate}`
      );
    }
  }
}

bot.on("callback_query", (msg) => {
  const chatId = msg.from.id;
  const query = msg.data;
  const user = users.filter((x) => x.id === chatId)[0];

  switch (query) {
    case "feedback":
      bot.sendMessage(chatId, `–°–≤—è–∑—å: ${process.env.REQUISITES_TELEGRAM}`);
      break;

    case "instruction":
      const instructionText = `–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${user.name}, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ —Ç–µ–ø–µ—Ä—å —É—Å–ª–æ–≤–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ.\n\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ—Å—Ç—ã –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø. –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–æ—Å—Ç—É–ø–∞.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞: 1 –º–µ—Å—è—Ü - 500 ‚ÇΩ\n\n‚úÖ –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑\nüìÅ –ë–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É\nüîò 5536914087493080\n‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: (–†—É—à–∞–Ω–∞ –ù)\n\n–î–∞–ª–µ–µ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —á–µ–∫, –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞. –í–∞–º —Å—Ä–∞–∑—É –±—É–¥–µ—Ç –¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã: @podderzhkachata\n\n–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∏ –ø—Ä–∏ —ç—Ç–æ–º —à–ª–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–ø–æ–∏—Å–∫ –∫—É—Ä—å–µ—Ä–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∞–º–∏ –∏–ª–∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π —Å–ø–∞–º (—Å–≤—è–∑–∫–∏, –∞—Ä–±–∏—Ç—Ä–∞–∂), —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.`;
      bot.sendMessage(chatId, instructionText, {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data: `paymentSuccess` }],
          ],
        }),
      });
      break;

    case "paymentSuccess":
      const paymentSuccessText = `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ pdf-—Ñ–∞–π–ª–∞\n\n–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã: @podderzhkachata`;

      bot.sendMessage(chatId, paymentSuccessText);
      bot.on("document", handleDocumentSend);
      bot.on("photo", handlePhotoSend);
      break;

    default:
      checkPaymentStatus(query);
      break;
  }
});

bot.on("document", handleDocumentSend);
bot.on("photo", handlePhotoSend);

setInterval(() => {
  const currentDate = new Date();

  for (const user of users) {
    if (user.isHavePremium && user.dateBuyedPremium) {
      const endDate = new Date(user.dateBuyedPremium);

      if (currentDate >= endDate) {
        user.dateBuyedPremium = null;
        user.isHavePremium = false;

        bot.sendMessage(user.id, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name}: –ü—Ä–µ–º–∏—É–º –∏—Å—Ç–µ–∫.`);
        bot.sendMessage(
          process.env.ADMIN_ID,
          `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${user.nick}: –ü—Ä–µ–º–∏—É–º –∏—Å—Ç–µ–∫.`
        );

        fs.writeFileSync(
          "./assets/data/users.json",
          JSON.stringify(users, null, "\t")
        );
      }
    }
  }
}, 5000);

bot.on("polling_error", console.log);
